/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
}

group 'com.raonsecure.odi'
version '1.0.0.2'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    google()
 //   mavenLocal()

}

ext {
    junitVersion = '5.9.2'
}

// 자바 컴파일 버전 설정
java {
    sourceCompatibility = JavaVersion.VERSION_17
  //  targetCompatibility = JavaVersion.VERSION_17
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
   // api 'org.apache.commons:commons-math3:3.6.1',
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
   // implementation 'com.google.guava:guava:28.2-jre'

	//implementation "com.raonsecure.license:RSLicenseSDK_jdk16:1.1.1"

    implementation project (':odi-sdk-crypto')
    implementation project (':odi-sdk-did')

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation "com.madgag.spongycastle:core:1.58.0.0"
    implementation "com.madgag.spongycastle:pkix:1.54.0.0"
    implementation "com.madgag.spongycastle:prov:1.58.0.0"
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
  //  implementation 'com.raonsecure.odi:odi-sdk-crypto:1.0.0.2'
//    implementation files('../odi-sdk-crypto/build/libs/odi-sdk-crypto-1.0.0.2.jar')
    testImplementation 'junit:junit:3.8.1'
    compileOnly 'org.slf4j:slf4j-api:1.7.32'
    compileOnly'jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0'
    compileOnly'jakarta.json.bind:jakarta.json.bind-api:2.0.0'
    compileOnly'jakarta.json:jakarta.json-api:2.0.1'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

task generateCode {
    doLast {
        def templateDir = file("${projectDir}/java-templates/com/raonsecure/odi/wallet")
        def generatedDir = file("${buildDir}/generated-sources/java-templates/com/raonsecure/odi/wallet")

        generatedDir.mkdirs()

        templateDir.eachFileMatch(~/.*\.java/) { templateFile ->
            def templateContent = templateFile.text
            def generatedContent = templateContent.replace('${project.version}', project.version)
            def generatedContent2 = generatedContent.replace('${project.artifactId}', project.name)

            def generatedFileName = templateFile.name
            def generatedFile = new File(generatedDir, generatedFileName)

            generatedFile.write(generatedContent2)
        }
    }
}

sourceSets {
    generated {
        java {
            srcDirs "${buildDir}/generated-sources/java-templates"
        }
    }
}

sourceSets.main.java.srcDirs += sourceSets.generated.java.srcDirs

compileJava.dependsOn(generateCode)
jar.dependsOn(compileJava)


tasks.named('test') {
    useJUnitPlatform()
}
